syntaxdef coffee {

/\s+/m :;

# keywords
/(__(hasProp|extends|slice|bind|indexOf)and|b(reak|y)|c(a(se|tch)|on(tinue|st)|lass)\
|d(e(lete|fault|bugger)|o)|e(lse|x(tends|port)|num)|f(inally|alse|unction|or)\
|i(mport|n(|stanceof)|f|s(|nt)|l(oop|et)|n(ative|ew|o(|t)|ull)|o(n|f(|f)|r)|return\
|s(uper|witch)|t(ypeof|r(ue|y)|h(is|en|row))|un(less|til|defined)|v(ar|oid)\
|wh(en|ile|ith)|yes)\b/ : {
      region {
        type=keyword;
        index=word;
      }
}

# comments
/###/ : {
    context {
        /\\./: ;
        /$/m : exit;
        "\###" : exit;
    }
    region {
        type=comment;
	    findlinks=true;
    }
}

/#/ : {
    context {
        /\\./: ;
        /$/m : exit;
    }
    region {
        type=comment;
	    findlinks=true;
    }
}

# numbers
/(0x[0-9a-f]+l?)|([0-9]+(\.[0-9]*)?|\.[0-9]+)(e(\+|-)?[0-9]+)?(f|l|d)?/i : {
    region {
       type=numeric;
    }
}

# string literals
/"/ : {
    context {
        /\\./: ;
        /$/m : exit;
        "\"" : exit;
    }
    region ${ALL} {
           type=string;
    }
}
/"""/ : {
    context {
        /\\./: ;
        /$/m : exit;
        "\"\"\"" : exit;
    }
    region ${ALL} {
           type=string;
    }
}

/'/ : {
    context {
        /\\./: ;
        /$/m : exit;
        "'" : exit;
    }
    region ${ALL} {
           type=string;
    }
}
# regexes
/\/\/\// : {
    context {
        /\\./: ;
        /$/m : exit;
        "///" : exit;
    }
    region ${ALL} {
           type=string;
    }
}

}